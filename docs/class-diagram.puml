@startuml "Chess game"
hide circle

class Board {
  - cells: Cell[][]
  + moveChessPiece(chessPiece: ChessPieceBase, destinationCell: Cell)
  - checkEndGame()
  - setUpBoard(chessPieces: ChessPieceBase[])
}

class Cell {
  - x, y: number
  - label: string
  - assignLabel()
  + getPiece(): Piece
  + setPiece()
}

class Player {
  - moveChessPiece(chessPiece: ChessPieceBase, destinationCell: Cell)
  - undoMove()
  - redoMove()
}

class ChessPieceBase {
  - white: boolean
  - killed: boolean
  + canMove(Board, Cell, Cell): boolean
}

class King extends ChessPieceBase {
  - castlingDone: boolean
  + canMove(Board, Cell, Cell): boolean
}

class Queen extends ChessPieceBase {
  + canMove(Board, Cell, Cell): boolean
}

class Bishop extends ChessPieceBase {
  + canMove(Board, Cell, Cell): boolean
}

class Knight extends ChessPieceBase {
  + canMove(Board, Cell, Cell): boolean
}

class Rook extends ChessPieceBase {
  + canMove(Board, Cell, Cell): boolean
}

class Pawn extends ChessPieceBase {
  + canMove(Board, Cell, Cell): boolean
}

class Game {
  - board: Board
  - history: History
  - whitePlayer: Player
  - blackPlayer: Player
  + startGame()
  + endGame()
  + undoMove()
  + redoMove()
  + showHistory()
}

class History { 
  - moves: HistoryMove[]
  - redoMoves: HistoryMove[]
  + getMove(index: number): HistoryMove
  + addMove(chessPiece: ChessPieceBase, destinationCell: Cell)
  + showHistory()
  + undoMove()
  + redoMove()
}

class HistoryMove {
  - chessPiece: ChessPieceBase
  - destinationCell: Cell
}

Board -down-o Cell
Cell -down-o ChessPieceBase
Board .right.> History

History -down-* HistoryMove

Game -down-o Board
Game -down-o History
Game -down-o Player

Player .up.> Board
Player .up.> Game

@enduml